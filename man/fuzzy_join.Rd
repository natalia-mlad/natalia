% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds-tidy.R
\name{fuzzy_join}
\alias{fuzzy_join}
\title{Join two tables using fuzzy (aka approximate) matching}
\usage{
fuzzy_join(
  df.x,
  df.y,
  by = NULL,
  max.distance = 0.3,
  ignore.case = TRUE,
  useBytes = TRUE
)
}
\arguments{
\item{df.x}{dataframe 1}

\item{df.y}{dataframe 2}

\item{by}{join by argument (e.g., by = c("x" = "y")); same usage as in \code{\link[dplyr:mutate-joins]{dplyr::left_join()}}}

\item{max.distance}{numeric; 0.3 by default; see \code{\link[base:agrep]{base::agrep()}} for details}

\item{ignore.case}{logical; TRUE by default; see \code{\link[base:agrep]{base::agrep()}} for details}

\item{useBytes}{logical; TRUE by default; see \code{\link[base:agrep]{base::agrep()}} for details}
}
\value{
modified df.x with instructions on how to join with df.y
}
\description{
Uses \code{\link[base:agrep]{base::agrep()}} and loops through each row of \code{df.x} identifying the closest value match in \code{df.y}, given parameters set.
It's a bit of a work in progress for the most part.
Sometimes works really well with the default parameters and other times requires quite a bit of fiddling around.
So remember to always check the results!
I've successfully used it for matching customer names across databases when other (more robust) variables were unavailable or returned conflicting results.
}
